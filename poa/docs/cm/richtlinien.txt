Richtlinien zur POA-Enwticklung
===============================


1. Einzusetzende Software


1.1 Betriebssystemplattform
---------------------------
Die Entwicklung von POA findet primär unter Unix-basierten 
Betriebssystemen statt (u.a. GNU/Linux, *BSD, Darwin, etc.).
Aus der Festlegung der primären Betriebssystemplattform ergeben sich
folgende Forderungen an Dateiformate:

* ASCII-Dateien verwenden Latin-1 (ISO8859-1) Encoding
* das Dateiformat für Zeilenumbrüche muß UNIX-kompatibel sein
  (d.h. keine Ctrl-M Sequenzen sind erlaubt, Windows-User
   mögen dies entsprechend berücksichtigen)

1.2 Dateiverwaltungssystem
--------------------------
Als Dateiverwaltungssystem für ASCII-Dateien (dazu zählen sämtliche
C++ Sourcen, Textdateien, LaTeX-Sourcedateien, etc.) wird CVS eingesetzt,
Binärdateien werden in einer adäquaten Verzeichnisstruktur auf dem
Entwicklungsserver bei BerliOS.de im Projektverzeichnis mit scp
abgelegt und gepflegt und nicht(!) ins CVS Repository eingecheckt.
Regelungen bzgl. der Verzeichnisstruktur, des Repositoryservers und der
grundsätzlichen Bedienung von scp und CVS werden in Kapitel 2 erläutert.

1.3 Entwicklungsumgebung
------------------------
Als Compiler wird der gcc 3.2.x eingesetzt (evtl. zu einem späteren
Zeitpunkt gcc 3.3), als Toolkit wird Qt 3.1.x verwendet, als
Konfigurationstool wird qmake verwendet, als Resourceneditor wird
Qt Designer eingesetzt.

Als Dokumentationswerkzeug für die Anforderungsanalyse, die Spezifikation
und etwaiger Entwurfsdokumente wird LaTeX 2e oder neuer verwendet.
Austauschformat von fertiggestellten Dokumenten ist PDF 1.3 (wird durch
die pdflatex Tools generiert).
Für Seminarpräsentationen wird die Wahl des Präsentationswerkzeuges
freigestellt.

Die Wahl des Editors und weiterer Entwicklungstools obliegt den
persönlichen Präferenzen eines jeden Entwicklers. Wichtig ist lediglich,
dass der verwendete Editor die Encoding-Forderungen (Latin-1) und
ein UNIX-konformes Speichern der Dateien unterstützt, sowie in der Lage
ist, die Codierrichtlinien (die zu einem späteren Zeitpunkt in einem
separaten Kapitel näher spezifiziert werden) einzuhalten.



2. CVS und scp


2.1 CVS (concurrent version system)
-----------------------------------

2.1.1 Grundsätzliche Einrichtung
--------------------------------

Um CVS korrekt verwenden zu können, bedarf es folgender Umgebungsvariablen:

für sh orientierte Shells (z.B. bash):

export CVS_RSH=ssh
(ggf. in .profile nachziehen)

für csh orientierte Shells (z.B. tcsh):

setenv CVS_RSH ssh
(ggf. in .cshrc nachziehen)

Evtl. ist noch zusätzlich gewünscht, die CVSROOT Umgebungsvariable zu setzen,
aber nicht notwendig, siehe folgender Link: 

http://cvsbook.red-bean.com/cvsbook.html

2.1.2 Lokale Arbeitskopie aus dem CVS Repository anlegen
--------------------------------------------------------

Es muß sichergestellt sein, dass CVS_RSH=ssh bereits gesetzt ist.
Um POA erstmals auszuchecken folgendes Kommando eingeben:

cvs -z3 -d<Dein-Username>@cvs.poa.berlios.de:/cvsroot/poa co <Modulname>

Den jeweiligen Modulnamen erfährst Du durch Blick auf das CVS-Web-Repository
unter:

http://cvs.berlios.de/cgi-bin/viewcvs.cgi/poa

Dabei ist der <Modulname> äquivalent zu einem Verzeichnisnamen != CVSROOT.

2.1.3 Der normale Tagesablauf
-----------------------------

Bevor Du Änderungen an Source-Dateien vornimmst, die ins CVS Repository
eingecheckt werden sollen, bringe zuallererst Deine lokale Arbeitskopie
auf den aktuellen Stand:

cd <lokales Arbeitsverzeichnis alias Modulname>
cvs update -Ad (Kurzform: cvs up -Ad)

Nun kannst Du Deine Änderungen vornehmen, wenn Du fertig bist, d.h. Deine
Änderungen kompilieren, bringe Deine lokale Arbeitskopie erneut auf den
aktuellen Stand (Befehl siehe oben wiederholen) und prüfe erneut, ob
Deine Änderungen kompilieren. Wenn ja, dann darfst Du einchecken, wenn
nein, dann schaue nach ob es einen Konflikt gegeben hat (Verweis auf
tiefergehende CVS-Dokumentationen, siehe Link oben) und fixe das Problem,
bevor Du eincheckst.

Wenn Du neue Dateien/Verzeichnisse angelegt hast, dann mußt Du diese mit
folgendem Befehl in das Repository hinzufügen:

cvs add <Liste der Datei-/Verzeichnisnamen, die noch nicht im CVS sind>

Einchecken tust Du wie folgt (stelle sicher, dass Du Dich im
Arbeitsverzeichnis befindest):

cvs commit (Kurzform: cvs ci) 

Erst jetzt darfst Du Dein allabendliches Bier genießen ;-)

Falls weitere Fragen offen sein sollten, konsultiere zuerst das oben
angegebene Tutorial, danach eine Suchmaschine Deiner Wahl und erst
danach einen Teamkollegen :)

2.2 scp (secure copy)
---------------------

Da der genaue Verzeichnisbaum zur Ablage von Binärdateien noch nicht
feststeht, wird hier zuvor das grundlegende Vorgehen zur Ablage
von Binärdateien beschrieben.

Jeder POA-Entwickler hat durch seinen Berlios-Account und seine
Projektmitgliedschaft Zugriff auf das Projektverzeichnis. Prinzipiell
kann man sich via:

ssh <Username>@shell.berlios.de

bei berlios.de einloggen und kann anschließend ins Projektverzeichnis
via:

cd /home/groups/poa

wechseln. Hier wird sich in naher Zukunft ein leeres Gerüst eines
Verzeichnisbaumes befinden.

Um nun eine Binärdatei ins Projektverzeichnis hochzuladen, bedarf es
nicht der umständlichen Vorgehensweise sich erst via ssh einzuloggen,
dann ins Verzeichnis zu wechseln usw., sondern lediglich eines
scp Befehls.
Nachdem man sich den Ablageort vergegenwärtigt hat (durch die Angaben
in diesem Dokument, die in Zukunft hier nachgezogen werden), ist es
Zeit eine Binärdatei abzulegen bzw. zu überschreiben.
Beispielhaft sei folgendes Szenario aufgezeigt: Du hast eine
Seminarfoliensammlung erstellt und im PDF-Format vorliegen. Da es
wenig Sinn macht PDF-Dokumente ins CVS einzuchecken, legst Du Deine
Foliensammlung ins Projektverzeichnis z.B.  unter

/home/groups/poa/seminar/<User>/Folien.pdf

ab via:

scp Folien.pdf <User>@shell.berlios.de:/home/groups/poa/seminar/<User>/Folien.pdf

Dieses Prinzip solltest Du möglichst für alle Binärdateien einhalten,
falls Du Dir über den Ablageort unsicher bist, berate Dich im Team.

Stand: 23.05.2003 / Anselm
