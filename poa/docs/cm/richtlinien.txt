$Id: richtlinien.txt,v 1.6 2003/06/01 08:35:03 garbeam Exp $

Richtlinien zur POA-Enwticklung
===============================

Inhalt
------

0.    Vorraussetzungen

1.    Einzusetzende Software
1.1     Betriebssystemplattform
1.2     Dateiverwaltungssystem
1.3     Zeiterfassung
1.4     Entwicklungsumgebung

2.    Projektorganisation, CVS und scp
2.1     Projektorganisation
2.2     CVS (concurrent version system)
2.2.1     Grundsätzliche Einrichtung
2.2.2     Lokale Arbeitskopie aus dem CVS Repository anlegen
2.2.3     Updaten
2.2.4     Änderungen commiten
2.3     scp (secure copy)
2.3.1     Öffentlich verfügbare Binärdatei hochladen
2.3.2     Nicht-öffentliche (Binär-)Datei hochladen
2.4     Zeiterfassung

-------------------------------------------------------------------------------


0. Vorraussetzungen

Es wird von jedem Team-Mitglied vorausgesetzt, dass es eigenverantwortlich
einen Entwickler-Account bei BerliOS.de und auf 
duck.informatik.uni-stuttgart.de anlegt und sofern bisher nicht geschehen,
beim CM per Mail die Aufnahme zum Projekt verlangt.
Die jeweilige Zuständigkeit von den Projektplattformen unter BerliOS und
duck ist in Kapitel 2.1 festgelegt.

-------------------------------------------------------------------------------


1. Einzusetzende Software


1.1 Betriebssystemplattform
---------------------------
Die Entwicklung von POA findet primär unter Unix-basierten 
Betriebssystemen statt (u.a. GNU/Linux, *BSD, Darwin, etc.).
Aus der Festlegung der primären Betriebssystemplattform ergeben sich
folgende Forderungen an Dateiformate:

* ASCII-Dateien verwenden Latin-1 (ISO8859-1) Encoding
* das Dateiformat für Zeilenumbrüche muß UNIX-kompatibel sein
  (d.h. keine Ctrl-M Sequenzen sind erlaubt, Windows-User
   mögen dies entsprechend berücksichtigen)


1.2 Dateiverwaltungssystem
--------------------------
Als Dateiverwaltungssystem für ASCII-Dateien (dazu zählen sämtliche
C++ Sourcen, Textdateien, LaTeX-Sourcedateien, etc.) wird CVS eingesetzt,
Binärdateien werden in einer adäquaten Verzeichnisstruktur auf dem
Entwicklungsserver bei BerliOS.de im Projektverzeichnis mit scp
abgelegt und gepflegt und nicht(!) ins CVS Repository eingecheckt.
Regelungen bzgl. der Verzeichnisstruktur, des Repositoryservers und der
grundsätzlichen Bedienung von scp und CVS werden in Kapitel 2.2 und 2.3
erläutert.


1.3 Zeiterfassung
-----------------
Jedes Team-Mitglied erfasst seine für das Projekt aufgewandte Zeit
mit dem extra dafür eingerichteten Zeiterfassungs- und Auswertungs-
system auf duck.informatik.uni-stuttgart.de. Anmerkungen und Links zur 
Benutzung sind in Kapitel 2.4 eingearbeitet.


1.4 Entwicklungsumgebung
------------------------
Als Compiler wird der gcc 3.2.x eingesetzt (evtl. zu einem späteren
Zeitpunkt gcc 3.3), als Toolkit wird Qt 3.1.x verwendet, als
Konfigurationstool wird qmake verwendet, als Resourceneditor wird
Qt Designer eingesetzt. Zur Generierung von Latex Dateien werden
vorwiegend Makefiles eingesetzt, die GNU make 3.7+ kompatibel sein müssen.

Als Dokumentationswerkzeug für das Angebot, die Mini-Spezifikation,
und der Entwurfsdokumente wird LaTeX 2e oder neuer verwendet.
Zur Erstellung des Handbuchs wird entweder LaTeX 2e oder DocBook
eingesetzt.
Austauschformat von fertiggestellten Dokumenten ist PDF 1.3 (wird durch
die pdflatex Tools generiert).

-------------------------------------------------------------------------------


2. Projektorganisation, CVS und scp


2.1 Projektorganisation
-----------------------
Die POA Entwicklung findet grundsätzlich auf BerliOS.de statt.
Lediglich die Zeiterfassung zur individuellen Messung des
Entwicklungsaufwandes wird auf dem eigens dafür eingerichteten System
auf duck.informatik.uni-stuttgart.de durchgeführt. Näheres hierzu
unter 2.4.


2.2 CVS (concurrent version system)
-----------------------------------

2.2.1 Grundsätzliche Einrichtung
--------------------------------
Um CVS korrekt verwenden zu können, bedarf es folgender Umgebungsvariablen:

für sh orientierte Shells (z.B. bash):

export CVS_RSH=ssh
(ggf. in .profile nachziehen)

für csh orientierte Shells (z.B. tcsh):

setenv CVS_RSH ssh
(ggf. in .cshrc nachziehen)

Evtl. ist noch zusätzlich gewünscht, die CVSROOT Umgebungsvariable zu setzen,
aber nicht notwendig, siehe folgender Link: 

http://cvsbook.red-bean.com/cvsbook.html


2.2.2 Lokale Arbeitskopie aus dem CVS Repository anlegen
--------------------------------------------------------
Es muß sichergestellt sein, dass CVS_RSH=ssh bereits gesetzt ist.
Um POA erstmals auszuchecken folgendes Kommando eingeben:

cvs -z3 -d<Username>@cvs.poa.berlios.de:/cvsroot/poa co <Modulname>

Den jeweiligen Modulnamen erfährt man durch Blick auf das CVS-Web-Repository
unter:

http://cvs.berlios.de/cgi-bin/viewcvs.cgi/poa

Dabei ist der <Modulname> äquivalent zu einem Verzeichnisnamen != CVSROOT.


2.2.3 Updaten
-------------
Bevor Änderungen an Source-Dateien vorgenommen werden, muß die lokale
Arbeitskopie mit der aktuellen Version im CVS Repository (HEAD)
synchronisiert werden:

cd <lokales Arbeitsverzeichnis alias Modulname>
cvs update -APd (Kurzform: cvs up -APd)


2.2.4 Änderungen commiten
-------------------------
Bevor Änderungen committed werden, wird zuvor noch einmal auf den
aktuellen Stand der Version im CVS Repository upgedatet, um evtl. 
Konflikte zu identifizieren und ggf. zu beheben (siehe 2.2.3).

Sofern neue Dateien/Verzeichnisse angelegt wurden, müssen diese mit
folgendem Befehl in das Repository hinzugefügt werden:

cvs add <Liste der Datei-/Verzeichnisnamen, die noch nicht im CVS sind>

Änderungen werden mit folgendem Befehl eingecheckt (committed):

cvs commit (Kurzform: cvs ci) 


2.3 scp (secure copy)
---------------------
Binärdateien und Dateien, auf die nicht öffentlich zugegriffen werden
soll, werden im Projektverzeichnis unter:

/home/groups/poa/htdocs/

an geeigneter Stelle via scp abgelegt. 


2.3.1 Öffentlich verfügbare Binärdatei hochladen
------------------------------------------------
Um eine Binärdatei (z.B. ein generiertes PDF) im Projektverzeichnis
öffentlich verfügbar abzulegen, wird folgender Befehl verwendet:

scp <Datei> <Username>@shell.berlios.de:/home/groups/poa/htdocs/<Ziel>

Dadurch ist die Datei u.a. via http Protokoll unter:

http://poa.berlios.de/<Ziel>

abrufbar.

Außerdem kann man Binärdateien auch auf den anonym erreichbaren ftp
Space via:

scp <Datei> <Username>@shell.berlios.de:/home/groups/ftp/pub/poa/<Ziel>

hochladen. Dadurch ist die Datei via ftp Protokoll unter:

ftp://ftp.berlios.de/pub/poa/<Ziel>

abrufbar.


2.3.2 Nicht-öffentliche (Binär-)Datei hochladen
-----------------------------------------------
Nicht öffentliche Dateien werden an eine geeignete Stelle unter:

scp <Datei> <Username>@shell.berlios.de:/home/groups/poa/htdocs/intern/<Ziel>

kopiert.

Anschließend muß man sich via ssh einloggen und die Dateirechte einschränken:

ssh <Username>@shell.berlios.de

cd /home/groups/poa/htdocs/intern

chmod o-rwx <Ziel>

(z.B. befinden sich die Sitzungsprotokolle nur für Teammitglieder via ssh
 lesbar unter /home/groups/poa/htdocs/intern/protocols)


2.4 Zeiterfassung
-----------------
Zur Erfassung der individuellen Zeitaufwände wurde auf
duck.informatik.uni-stuttgart.de für das Projekt ein Zeiterfassungssystem
eingerichtet. Damit es von allen Entwicklern genutzt werden kann, muß
sich jeder Entwickler auf duck.informatik.uni-stuttgart.de einen Account
einrichten und in das dortige POA Projekt aufgenommen werden (siehe 0.).

Unter folgender URL befindet sich das Webfrontend zur Zeiterfassung:

https://duck.informatik.uni-stuttgart.de/times/cgi-bin/times.cgi?project=poa

Von jedem Entwickler werden hier lediglich die individuellen Zeitaufwände
erfaßt. Zeitaufwände die in der Gruppe gemeinsam aufgewendet wurden, z.B.
bei Meetings, werden vom CM oder Projektleiter eingepflegt.

Die grundsätzliche Bedienung der Zeiterfassung wird im Handbuch unter:

https://duck.informatik.uni-stuttgart.de/www/times/manual/index.html

beschrieben.

-------------------------------------------------------------------------------
